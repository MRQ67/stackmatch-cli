package cmd

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/MRQ67/stackmatch-cli/internal/utils"
	"github.com/MRQ67/stackmatch-cli/pkg/types"
	"github.com/spf13/cobra"
)

var importCmd = &cobra.Command{
	Use:   "import [filename]",
	Short: "Show what would be installed from a StackMatch JSON file",
	Long: `Reads a StackMatch environment file and displays a summary of the tools,
configurations, and system details it contains. This command is for inspection
and does not perform any actual installation or modification of your system.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		inputFile := args[0]

		fileContent, err := os.ReadFile(inputFile)
		if err != nil {
			utils.ExitWithError(fmt.Errorf("could not read file %s: %w", inputFile, err))
		}

		var envData types.EnvironmentData
		err = json.Unmarshal(fileContent, &envData)
		if err != nil {
			utils.ExitWithError(fmt.Errorf("could not parse JSON from %s: %w", inputFile, err))
		}

		fmt.Printf("--- Environment Summary from %s ---\n", inputFile)
		fmt.Printf("Generated by StackMatch Version: %s\n", envData.StackmatchVersion)
		fmt.Printf("Scan Date: %s\n\n", envData.ScanDate.Format("2006-01-02 15:04:05 MST"))

		fmt.Println("System Information:")
		fmt.Printf("  OS: %s\n", envData.System.OS)
		fmt.Printf("  Architecture: %s\n", envData.System.Arch)
		fmt.Printf("  Shell: %s\n\n", envData.System.Shell)

		if len(envData.ConfiguredLanguages) > 0 {
			fmt.Println("Programming Languages:")
			for lang, version := range envData.ConfiguredLanguages {
				fmt.Printf("  - %s: %s\n", lang, version)
			}
			fmt.Println()
		}

		if len(envData.Tools) > 0 {
			fmt.Println("Development Tools:")
			for tool, version := range envData.Tools {
				fmt.Printf("  - %s: %s\n", tool, version)
			}
			fmt.Println()
		}

		if len(envData.PackageManagers) > 0 {
			fmt.Println("Package Managers:")
			for pm, version := range envData.PackageManagers {
				fmt.Printf("  - %s: %s\n", pm, version)
			}
			fmt.Println()
		}

		if len(envData.CodeEditors) > 0 {
			fmt.Println("Code Editors:")
			for editor, version := range envData.CodeEditors {
				fmt.Printf("  - %s: %s\n", editor, version)
			}
			fmt.Println()
		}

		if len(envData.ConfigFiles) > 0 {
			fmt.Println("Configuration Files:")
			for _, file := range envData.ConfigFiles {
				fmt.Printf("  - %s\n", file)
			}
			fmt.Println()
		}

		fmt.Println("--- End of Summary ---")
		fmt.Println("Note: This is a dry run. No changes have been made to your system.")
	},
}

func init() {
	rootCmd.AddCommand(importCmd)
}
