name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            output_name: stackmatch-linux-amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            output_name: stackmatch-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            output_name: stackmatch-darwin-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            output_name: stackmatch-windows-amd64.exe

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build binary
        run: go build -ldflags="-s -w" -o ${{ matrix.output_name }} .
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}



      - name: Rename EXE for Installer
        if: matrix.os == 'windows-latest'
        run: ren ${{ matrix.output_name }} stackmatch-cli.exe

      - name: Update Installer Script Version
        if: matrix.os == 'windows-latest'
        run: |
          $version = "${{ github.ref_name }}".Substring(1)
          (Get-Content -path "install.iss") -replace "AppVersion=0.0.0", "AppVersion=$version" | Set-Content -path "install.iss"
          Write-Host "Installer version set to $version"

      - name: Compile Inno Setup installer
        if: matrix.os == 'windows-latest'
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.5
        with:
          path: install.iss

      - name: Upload Artifacts (non-Windows)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}-${{ matrix.goarch }}
          path: ${{ matrix.output_name }}

      - name: Upload Artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}-${{ matrix.goarch }}
          path: |
            stackmatch-cli.exe
            Output/stackmatch-cli-setup.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: build-artifacts-*
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
          generate_release_notes: true